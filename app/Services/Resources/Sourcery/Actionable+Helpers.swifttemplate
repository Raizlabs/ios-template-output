<%_
func variableName(for type: Type) -> String {
    let lookups = [
        "Cell": "cell",
        "Coordinator": "coordinator",
        "View": "view",
        "ViewController": "vc",
        "Service": "service"]
    for (suffix, specialName) in lookups {
        if type.name.hasSuffix(suffix) {
            return specialName
        }
    }
    return "component"
}

func delegateName(for type: Type) -> String {
    var delegateName = "\(type.localName)Delegate"
    var currentType = type
    while let parent = currentType.parent {
        delegateName = "\(parent.localName)\(delegateName)"
        currentType = parent
    }
    return delegateName
}

func lowerFirstCamelCaseGroup(_ input: String) -> String {
    guard !input.isEmpty else { return "" }
    let firstCapitals = input.prefix { character in
        return character.unicodeScalars.contains { unicodeScalar in
            CharacterSet.uppercaseLetters.contains(unicodeScalar)
        }
    }

    guard !firstCapitals.isEmpty else {
        return input
    }

    let newPrefix: String

    if firstCapitals.count == 1 {
        newPrefix = firstCapitals.lowercased()
    }
    else {
        newPrefix = "\(firstCapitals.dropLast().lowercased())\(firstCapitals.last!)"
    }

    var updated = input
    let range = updated.range(of: firstCapitals)!
    updated.replaceSubrange(range, with: newPrefix)
    return updated
}
_%>
