fastlane_version "2.90.0"

fastlane_require 'circleci_artifact'

default_platform :ios

# Set by build environment
# FL_HOCKEY_API_TOKEN
# RZ_KEYCHAIN_PASSWORD
# SLACK_URL - set the hook URL in the CircleCI environment

ENV['RZ_ARTIFACTS'] ||= ENV['CIRCLE_ARTIFACTS'] || './build'
ENV['RZ_TEST_REPORTS'] ||= ENV['CIRCLE_TEST_REPORTS'] || './build'
ENV['FASTLANE_XCODE_LIST_TIMEOUT'] = '120'
ENV['CI_BUILD'] = 'yes'
ENV['GYM_OUTPUT_NAME'] = 'ProjectName'
ENV['FL_HOCKEY_IPA'] = "#{ENV['RZ_ARTIFACTS']}/#{ENV['GYM_OUTPUT_NAME']}.ipa"
ENV['FL_HOCKEY_NOTIFY'] = '0'

DERIVED_DATA_PATH = "#{ENV['RZ_TEST_REPORTS']}/derived_data"
TEST_SCHEME = "debug-ProjectName"

platform :ios do

  before_all do
    if ENV['RZ_ARTIFACTS'] && ENV['RZ_ARTIFACTS'].length > 0
      sh 'rm -rf $RZ_ARTIFACTS && mkdir $RZ_ARTIFACTS'
    end
    install_provisioning_profiles(override_provisioning_profiles: true)
  end

  desc "Runs tests"
  lane :test do
    scan(
      output_types: 'junit,html',
      scheme: TEST_SCHEME,
      output_directory: "#{ENV['RZ_TEST_REPORTS']}/scan",
      buildlog_path: "#{ENV['RZ_ARTIFACTS']}",
      code_coverage: true,
      derived_data_path: DERIVED_DATA_PATH
    )
    if !ENV['CIRCLE_TEST_REPORTS'].nil?
      # CircleCI requires the "xml" extension for test reporting
      puts "Fixing JUnit report name"
      sh "cp #{ENV['RZ_TEST_REPORTS']}/scan/report.junit #{ENV['RZ_TEST_REPORTS']}/scan/report.xml"
    end
  end

  desc "Runs Code Coverage"
  lane :coverage do
    slather_use_coveralls = "false"
    slather_use_circleci = "false"

    if !ENV['CIRCLE_BUILD_NUM'].nil?
      slather_use_circleci = "true"
    end

    # Add targets here as you create internal frameworks
    xcov_targets = "debug-ProjectName.app, Services.framework"
    xcov_scheme = TEST_SCHEME
    xcov_workspace = "ProjectName.xcworkspace"

    xcov(
      workspace: xcov_workspace,
      scheme: xcov_scheme,
      output_directory: "#{ENV['RZ_TEST_REPORTS']}/xcov",
      include_targets: xcov_targets,
      derived_data_path: DERIVED_DATA_PATH
    )

    slather_proj = "ProjectName.xcodeproj"
    slather_workspace = xcov_workspace
    slather_scheme = TEST_SCHEME
    # Add binaries here as you create internal frameworks
    slather_binaries = ['debug-ProjectName', 'Services']
    slather_output_directory = "#{ENV['RZ_TEST_REPORTS']}/slather"

    # html and cobertura_xml output must be run separately
    slather(
      proj: slather_proj,
      workspace: slather_workspace,
      scheme: slather_scheme,
      binary_basename: slather_binaries,
      output_directory: slather_output_directory,
      html: "true",
      build_directory: DERIVED_DATA_PATH
    )
    # Using Cobertura XML allows us to upload to Codecov.io
    # Uploading to codecov is handled separately in the .circleci/config.yml
    slather(
      proj: slather_proj,
      workspace: slather_workspace,
      scheme: slather_scheme,
      binary_basename: slather_binaries,
      output_directory: slather_output_directory,
      circleci: slather_use_circleci,
      coveralls: slather_use_coveralls,
      cobertura_xml: "true",
      build_directory: DERIVED_DATA_PATH
    )
  end

  desc "Posts screenshots to Slack"
  lane :slackshots do
    # Getting artifact URLs from CircleCI

    # You must set up the CIRCLE_API_TOKEN manually using these instructions
    # https://github.com/Rightpoint/ios-template#danger
    token = ENV['CIRCLE_API_TOKEN']
    # These are already in the Circle environment
    # https://circleci.com/docs/2.0/env-vars/#build-specific-environment-variables
    username = ENV['CIRCLE_PROJECT_USERNAME']
    reponame = ENV['CIRCLE_PROJECT_REPONAME']
    build = ENV['CIRCLE_BUILD_NUM']

    if !(token.nil? or username.nil? or reponame.nil? or build.nil?)
      fetcher = CircleciArtifact::Fetcher.new(token: token, username: username, reponame: reponame, build: build)
      screenshots = CircleciArtifact::Query.new(url_substring: 'screenshots/screenshots.html')
      queries = [screenshots]
      results = fetcher.fetch_queries(queries)
      screenshots_url = results.url_for_query(screenshots)
      if !screenshots_url.nil?
        slack(message: "[Screenshots](#{screenshots_url})", success: true)
      else
        slack(message: "Screenshots are missing!", success: false)
      end
    else
      slack(message: "Missing CircleCI artifacts. Most likely the [CIRCLE_API_TOKEN](https://github.com/Rightpoint/circleci_artifact#getting-started) is not set, or not running on CircleCI.", success: false)
    end
  end

  desc "Builds and submits a Develop release to Hockey"
  lane :develop do
    build("develop-ProjectName", 'enterprise', {
      teamID: "XRTVVR644Y",
      signingCertificate: "iPhone Distribution",
      provisioningProfiles: { "com.rightpoint.project-name.develop" => "Raizlabs Generic Enterprise Profile" }
    })
    hockey(public_identifier: 'ZZHOCKEY_DEVELOP_IDZZ')
    # upload_symbols_to_crashlytics(:api_token => 'ZZCRASHLYTICS_API_TOKEN_DEVELOPZZ')
    slack(message: "Successfully uploaded build #{build_number} to develop", success: true)
  end

  desc "Builds and submits a Sprint release to Hockey"
  lane :sprint do
    build("sprint-ProjectName", 'enterprise', {
      teamID: "XRTVVR644Y",
      signingCertificate: "iPhone Distribution",
      provisioningProfiles: { "com.rightpoint.project-name.sprint" => "Raizlabs Generic Enterprise Profile" }
    })
    hockey(public_identifier: 'ZZHOCKEY_SPRINT_IDZZ')
    # upload_symbols_to_crashlytics(:api_token => 'ZZCRASHLYTICS_API_TOKEN_SPRINTZZ')
    slack(message: "Successfully uploaded build #{build_number} to sprint", success: true)
  end

  # desc "Builds and submits an App Store release to TestFlight"
  lane :beta do
  #  build("appStore-ProjectName", 'app-store', {
  #    teamID: "",
  #    signingCertificate: "iPhone Distribution",
  #    provisioningProfiles: { "" => "" }
  #  })
  #  pilot(
  #   distribute_external: false,
  #     skip_waiting_for_build_processing: true,
  #  )
  #  upload_symbols_to_crashlytics(:api_token => 'ZZCRASHLYTICS_API_TOKEN_APPSTOREZZ')
  #  slack(message: "Successfully uploaded build #{build_number} to test flight", success: true)
  end

  # Helpers ----------------------

  desc "Sync Project and Directory Structure"
  lane :synx do
    sh "cd .. && synx ProjectName.xcodeproj"
  end

  def build(scheme, export_method, export_options)
    unlock_keychain(path: './Signing/Raizlabs-ProjectName.keychain', password: ENV['RZ_KEYCHAIN_PASSWORD'] )
    gym(
      output_directory: "#{ENV['RZ_ARTIFACTS']}",
      output_name: "ProjectName",
      export_method: export_method,
      scheme: scheme,
      include_bitcode: true,
      xcargs: "BUILD_NUMBER=#{build_number}",
      buildlog_path: "#{ENV['RZ_ARTIFACTS']}",
      export_options: export_options
    )
  end

  def build_number
    `git rev-list HEAD --count`.chomp()
  end

end
