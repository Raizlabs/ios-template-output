fastlane_version "2.89.0"

default_platform :ios

# Set by build environment
# FL_HOCKEY_API_TOKEN
# RZ_KEYCHAIN_PASSWORD
#ENV['SLACK_URL'] = 'https://hooks.slack.com/services/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'

ENV['RZ_ARTIFACTS'] ||= ENV['CIRCLE_ARTIFACTS'] || './build'
ENV['RZ_TEST_REPORTS'] ||= ENV['CIRCLE_TEST_REPORTS'] || './build'
ENV['FASTLANE_XCODE_LIST_TIMEOUT'] = '120'
ENV['CI_BUILD'] = 'yes'
ENV['GYM_OUTPUT_NAME'] = 'ProjectName'
ENV['FL_HOCKEY_IPA'] = "#{ENV['RZ_ARTIFACTS']}/#{ENV['GYM_OUTPUT_NAME']}.ipa"
ENV['FL_HOCKEY_NOTIFY'] = '0'

platform :ios do

  before_all do
    if ENV['RZ_ARTIFACTS'] && ENV['RZ_ARTIFACTS'].length > 0
      sh 'rm -rf $RZ_ARTIFACTS && mkdir $RZ_ARTIFACTS'
    end
    install_provisioning_profiles(override_provisioning_profiles: true)
  end

  desc "Runs tests"
  lane :test do
    scan(
      output_types: 'junit',
      scheme: 'debug-ProjectName',
      output_directory: "#{ENV['RZ_TEST_REPORTS']}",
      buildlog_path: "#{ENV['RZ_ARTIFACTS']}",
      code_coverage: true
    )
    if !ENV['CIRCLE_TEST_REPORTS'].nil?
      # CircleCI requires the "xml" extension for test reporting
      puts "Fixing JUnit report name"
      sh "mv #{ENV['RZ_TEST_REPORTS']}/report.junit #{ENV['RZ_TEST_REPORTS']}/report.xml"
    end

    if ENV['COVERALLS_REPO_TOKEN'].nil?
      xcov(
        workspace: "ProjectName.xcworkspace",
        scheme: "debug-ProjectName",
        output_directory: "#{ENV['RZ_TEST_REPORTS']}",
         # For some reason coverage is on the "develop-" app target instead of "debug-"
        include_targets: "develop-ProjectName.app, Services.framework",
      )
    else
      xcov(
        workspace: "ProjectName.xcworkspace",
        scheme: "debug-ProjectName",
        output_directory: "#{ENV['RZ_TEST_REPORTS']}",
         # For some reason coverage is on the "develop-" app target instead of "debug-"
        include_targets: "develop-ProjectName.app, Services.framework",
        coveralls_service_name: "circleci",
        coveralls_service_job_id: "#{ENV['CIRCLE_BUILD_NUM']}"
      )
    end


  end

  desc "Builds and submits a Develop release to Hockey"
  lane :develop do
    build("develop-ProjectName", 'enterprise', {
      teamID: "XRTVVR644Y",
      signingCertificate: "iPhone Distribution",
      provisioningProfiles: { "com.raizlabs.ProjectName.develop" => "Raizlabs Generic Enterprise Profile" }
    })    
    hockey(public_identifier: 'ZZHOCKEY_DEVELOP_IDZZ')
    # upload_symbols_to_crashlytics(:api_token => 'ZZCRASHLYTICS_API_TOKEN_DEVELOPZZ')
    slack(message: "Successfully uploaded build #{build_number} to develop", success: true)
  end

  desc "Builds and submits a Sprint release to Hockey"
  lane :sprint do
    build("sprint-ProjectName", 'enterprise', {
      teamID: "XRTVVR644Y",
      signingCertificate: "iPhone Distribution",
      provisioningProfiles: { "com.raizlabs.ProjectName.sprint" => "Raizlabs Generic Enterprise Profile" }
    })  
    hockey(public_identifier: 'ZZHOCKEY_SPRINT_IDZZ')
    # upload_symbols_to_crashlytics(:api_token => 'ZZCRASHLYTICS_API_TOKEN_SPRINTZZ')
    slack(message: "Successfully uploaded build #{build_number} to sprint", success: true)
  end

  # desc "Builds and submits an App Store release to TestFlight"
  lane :beta do
  #  build("appStore-ProjectName", 'app-store', {
  #    teamID: "",
  #    signingCertificate: "iPhone Distribution",
  #    provisioningProfiles: { "" => "" }
  #  })    
  #  pilot(
  #  	distribute_external: false,
  #    	skip_waiting_for_build_processing: true,
  #  )
  #  upload_symbols_to_crashlytics(:api_token => 'ZZCRASHLYTICS_API_TOKEN_APPSTOREZZ')
  #  slack(message: "Successfully uploaded build #{build_number} to test flight", success: true)
  end

  # Helpers ----------------------

  desc "Sync Project and Directory Structure"
  lane :synx do
    sh "cd .. && synx ProjectName.xcodeproj"
  end

  def build(scheme, export_method, export_options)
    unlock_keychain(path: './Signing/Raizlabs-ProjectName.keychain', password: ENV['RZ_KEYCHAIN_PASSWORD'] )
    gym(
      output_directory: "#{ENV['RZ_ARTIFACTS']}",
      output_name: "ProjectName",
      export_method: export_method,
      scheme: scheme,
      include_bitcode: true,
      xcargs: "BUILD_NUMBER=#{build_number}",
      buildlog_path: "#{ENV['RZ_ARTIFACTS']}",
      export_options: export_options
    )
  end

  def build_number
    `git rev-list HEAD --count`.chomp()
  end

end
